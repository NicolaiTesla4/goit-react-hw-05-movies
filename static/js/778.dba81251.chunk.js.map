{"version":3,"file":"static/js/778.dba81251.chunk.js","mappings":"mLAAO,IAAMA,EACX,mE,kBC2BF,EAzBa,WACX,IACMC,GADWC,EAAAA,EAAAA,MACSC,MAAMC,KAEhC,OACEH,IACEI,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,MAAAC,SACGL,EAASM,KAAI,SAAAC,GAAM,IAADC,EACXC,EAAOF,EAAEG,aAAY,kCAAAC,OACWJ,EAAEG,cACpC,qGACJ,OACEE,EAAAA,EAAAA,MAAA,MAAAP,SAAA,EACED,EAAAA,EAAAA,KAAA,OAAKS,IAAKJ,EAAMK,IAAI,SACpBV,EAAAA,EAAAA,KAAA,MAAAC,SAAW,QAAXG,EAAKD,EAAEQ,YAAI,IAAAP,EAAAA,EAAI,cCEX,WAGlB,IAHiC,IAAdQ,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACtBG,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWR,IAC3CA,KACLI,GAAMK,EAAgC,GAAdJ,EAAML,IAEhC,OAAOI,CACT,CDXuBM,GAKb,OAKV,C","sources":["../node_modules/nanoid/url-alphabet/index.js","components/Cast/Index.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { nanoid } from 'nanoid';\nimport { useLocation } from 'react-router-dom';\n\nconst Cast = () => {\n  const location = useLocation();\n  const castInfo = location.state.cast;\n\n  return (\n    castInfo && (\n      <div>\n        <ul>\n          {castInfo.map(e => {\n            const path = e.profile_path\n              ? `https://image.tmdb.org/t/p/w200${e.profile_path}`\n              : 'https://cdn.vectorstock.com/i/1000x1000/63/10/photo-coming-soon-picture-frame-vector-32416310.webp';\n            return (\n              <li key={nanoid()}>\n                <img src={path} alt=\"img\"  />\n                <h5>{e.name ?? 'No name'}</h5>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    )\n  );\n};\n\nexport default Cast;","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n"],"names":["urlAlphabet","castInfo","useLocation","state","cast","_jsx","children","map","e","_e$name","path","profile_path","concat","_jsxs","src","alt","name","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet","nanoid"],"sourceRoot":""}